apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'cc.game.dominos.swing.DominosApplet'

configurations {
    androidLib
}

dependencies {
    implementation project(':GameLibrary')
    implementation project(':jmdns')
    testImplementation 'junit:junit:4.12'
    androidLib project(path: ':GameLibrary', configuration: 'androidLib')
}

sourceSets {
    main {
        java {
            srcDirs = ['src', '../DominosAndroid/build/generated/source/r/debug' ]
        }
    }

    androidLib {
        java {
            srcDirs = [ 'src', '../DominosAndroid/build/generated/source/r/debug' ]
            excludes = ['**/skunkworks/**', '**/swing*/**']
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
    }
}

// Why is this necessary? Doesn't the dependency imply this?
// I cant tell if I am doing something wring or it is a bug
compileAndroidLibJava.dependsOn project(':GameLibrary').getTasksByName('androidLibJar', false)
compileAndroidLibJava.classpath += project(':GameLibrary').sourceSets.androidLib.output.classesDirs
// These call are required since we need the R.string class from android project
compileAndroidLibJava.dependsOn project(':DominosAndroid').getTasksByName('generateDebugSources', false)
compileJava.dependsOn project(':DominosAndroid').getTasksByName('generateDebugSources', false)

task androidLibJar(type: Jar) {
    from sourceSets.androidLib.output.classesDirs.filter {
        excludes = ['**/R.class', '**/R$*.class' ]
    }
}

artifacts {
    androidLib androidLibJar
}
