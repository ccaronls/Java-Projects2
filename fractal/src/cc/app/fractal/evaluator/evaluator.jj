options {
    static=false;
}

PARSER_BEGIN(Evaluator)

package cc.app.fractal.evaluator;

import cc.lib.math.ComplexNumber;

public class Evaluator extends AEvaluator {

    public Evaluator() {
        this(new java.io.StringReader(""));
    }

    public void parse(String expression) throws Exception {
      this.expression = expression;
        System.out.println("Parse expression '" + expression + "'");
        ReInit(new java.io.StringReader(expression));
        root = S();
        debugDump();
    }
    
    public void parse(ComplexNumber constant, String expression) throws Exception {
        this.C.copy(constant);
        this.expression = expression;
        System.out.println("Parse expression '" + expression + "'");
        ReInit(new java.io.StringReader(expression));
        root = S();
        debugDump();
    }

}

PARSER_END(Evaluator)

SKIP:  { 
    " " 
  | "\t" 
  | "\n" 
  | "\r"     
}

TOKEN: { 
    "(" 
  | ")" 
  | "+"
  | "-" 
  | "*" 
  | "/"  
  | "^"
  | <FUNC: ((["a"-"h"]|["j"-"z"])(["a"-"z"])+)>
  | <NUM: (("-")?("0"|((["1"-"9"])(["0"-"9"])*))("."(["0"-"9"])+)?)>
  | <DOUBLE: (("-")?("0"|((["1"-"9"])(["0"-"9"])*))("."(["0"-"9"])+))>
  | <INT: (("-")?("0"|((["1"-"9"])(["0"-"9"])*)))>
  | <REAL: ["A"-"Z"]"r">
  | <IMAG: ["A"-"Z"]"i">
}

Node S(): {Node n;}
{
  n=E() <EOF> {return n;}
}

Node E(): {Node n1, n2; Type t;}
{
  n1=T() ( ( "+" {t=Type.TYPE_ADD;} | "-" {t=Type.TYPE_SUB;} ) 
           n2=T() {n1 = new Node(t, n1, n2); } )* { return n1; }
}

Node T(): {Node n1, n2; Type t;}
{
  n1=P() ( ( "*" {t=Type.TYPE_MULT;} | "/" {t=Type.TYPE_DIV;} )
           n2=P() {n1 = new Node(t, n1, n2); } )* {return n1;}
}

Node P(): {Node n1, n2; }
{
  n1=F() ( "^" n2=F() {
     if (n2.type == Type.TYPE_CONSTANT) {
        if (n2.constantType == CONSTANT_INT) {
           n1 = new Node(Type.TYPE_POWI, n1, n2);
        } else if (n2.constantType == CONSTANT_DOUBLE) {
           n1 = new Node(Type.TYPE_POWD, n1, n2);
        } else {
           n1 = new Node(Type.TYPE_POWC, n1, n2);
        }
     } else {
        n1 = new Node(Type.TYPE_POWC, n1, n2);
     }
  } 
  )? {return n1;}
}

Node F(): {Token n0, n1; Node n; Type f; }
{
  "[" n0=<NUM> (","|"+") n1=<NUM> ("i")? "]"  {return new Node(new ComplexNumber(Double.parseDouble(n0.image), Double.parseDouble(n1.image)));}
|
  "(" n=E() ")" {return n;}
| 
  "Z0" { return new Node(Type.TYPE_Z0); }
|
  "Z" { return new Node(Type.TYPE_Zi); }
|
  "E"  { return new Node(Math.E, "E"); }
| 
  "PI" { return new Node(Math.PI, "PI"); }
|
  "X"  { return new Node(Zi.getReal(), "X"); }
|
  "Y"  { return new Node(Zi.getImag(), "Y"); }
|
  "C"  { return new Node(C); }
|
  "A"  { return new Node(Z0.getReal(), "A"); }
|
  "B"  { return new Node(Z0.getImag(), "B"); }
|
  n0=<NUM>  { return new Node(n0.image); }
|
  n0=<FUNC> { f=lookupFunc(n0.image); } "(" n=E() ")" { return new Node(f, n, null); }
|
  "-" n=F() { return new Node(Type.TYPE_NEGATE, n, null); }
}

