/* Generated By:JavaCC: Do not edit this line. Evaluator.java */
package cc.app.fractal.evaluator;

import cc.lib.math.ComplexNumber;

public class Evaluator extends AEvaluator implements EvaluatorConstants {

    public Evaluator() {
        this(new java.io.StringReader(""));
    }

    public void parse(String expression) throws Exception {
      this.expression = expression;
        System.out.println("Parse expression '" + expression + "'");
        ReInit(new java.io.StringReader(expression));
        root = S();
        debugDump();
    }

    public void parse(ComplexNumber constant, String expression) throws Exception {
        this.C.copy(constant);
        this.expression = expression;
        System.out.println("Parse expression '" + expression + "'");
        ReInit(new java.io.StringReader(expression));
        root = S();
        debugDump();
    }

  final public Node S() throws ParseException {
           Node n;
    n = E();
    jj_consume_token(0);
               {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node E() throws ParseException {
           Node n1, n2; Type t;
    n1 = T();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
      case 8:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        jj_consume_token(7);
                  t=Type.TYPE_ADD;
        break;
      case 8:
        jj_consume_token(8);
                                           t=Type.TYPE_SUB;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = T();
                   n1 = new Node(t, n1, n2);
    }
                                                    {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public Node T() throws ParseException {
           Node n1, n2; Type t;
    n1 = P();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 10:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        jj_consume_token(9);
                  t=Type.TYPE_MULT;
        break;
      case 10:
        jj_consume_token(10);
                                            t=Type.TYPE_DIV;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = P();
                   n1 = new Node(t, n1, n2);
    }
                                                   {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public Node P() throws ParseException {
           Node n1, n2;
    n1 = F();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
      n2 = F();
     if (n2.type == Type.TYPE_CONSTANT) {
        if (n2.constantType == CONSTANT_INT) {
           n1 = new Node(Type.TYPE_POWI, n1, n2);
        } else if (n2.constantType == CONSTANT_DOUBLE) {
           n1 = new Node(Type.TYPE_POWD, n1, n2);
        } else {
           n1 = new Node(Type.TYPE_POWC, n1, n2);
        }
     } else {
        n1 = new Node(Type.TYPE_POWC, n1, n2);
     }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
      {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public Node F() throws ParseException {
           Token n0, n1; Node n; Type f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      n0 = jj_consume_token(NUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
        break;
      case 7:
        jj_consume_token(7);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n1 = jj_consume_token(NUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        jj_consume_token(20);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(21);
                                               {if (true) return new Node(new ComplexNumber(Double.parseDouble(n0.image), Double.parseDouble(n1.image)));}
      break;
    case 5:
      jj_consume_token(5);
      n = E();
      jj_consume_token(6);
                 {if (true) return n;}
      break;
    case 22:
      jj_consume_token(22);
         {if (true) return new Node(Type.TYPE_Z0);}
      break;
    case 23:
      jj_consume_token(23);
        {if (true) return new Node(Type.TYPE_Zi);}
      break;
    case 24:
      jj_consume_token(24);
         {if (true) return new Node(Math.E, "E");}
      break;
    case 25:
      jj_consume_token(25);
         {if (true) return new Node(Math.PI, "PI");}
      break;
    case 26:
      jj_consume_token(26);
         {if (true) return new Node(Zi.getReal(), "X");}
      break;
    case 27:
      jj_consume_token(27);
         {if (true) return new Node(Zi.getImag(), "Y");}
      break;
    case 28:
      jj_consume_token(28);
         {if (true) return new Node(C);}
      break;
    case 29:
      jj_consume_token(29);
         {if (true) return new Node(Z0.getReal(), "A");}
      break;
    case 30:
      jj_consume_token(30);
         {if (true) return new Node(Z0.getImag(), "B");}
      break;
    case NUM:
      n0 = jj_consume_token(NUM);
              {if (true) return new Node(n0.image);}
      break;
    case FUNC:
      n0 = jj_consume_token(FUNC);
              f=lookupFunc(n0.image);
      jj_consume_token(5);
      n = E();
      jj_consume_token(6);
                                                        {if (true) return new Node(f, n, null);}
      break;
    case 8:
      jj_consume_token(8);
      n = F();
              {if (true) return new Node(Type.TYPE_NEGATE, n, null);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public EvaluatorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x180,0x180,0x600,0x600,0x800,0x80080,0x100000,0x7fc43120,};
   }

  /** Constructor with InputStream. */
  public Evaluator(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Evaluator(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EvaluatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Evaluator(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EvaluatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Evaluator(EvaluatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EvaluatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
