options {
	static=false;
}

PARSER_BEGIN(Evaluator)

package cc.app.fractal.evaluator;

import cc.app.fractal.*;

public class Evaluator {

    private final ComplexNumber COMPLEX_E = new ComplexNumber(Math.exp(1), 0);
    private final ComplexNumber COMPLEX_PI = new ComplexNumber(Math.PI, 0);
    
    private final ComplexNumber Z0 = new ComplexNumber();
    private final ComplexNumber Zi = new ComplexNumber();
    private final ComplexNumber t0 = new ComplexNumber();
    private final ComplexNumber t1 = new ComplexNumber();

    private Node root;

    public Evaluator() {
        this("");
    }

    public Evaluator(String expression) {
        this(new java.io.StringReader(expression));
    }

    public void parse(String expression) throws Exception {
        ReInit(new java.io.StringReader(expression));
        root = S();
    }

    public void reset(ComplexNumber Z0) {
        this.Z0.copy(Z0);
        Zi.copy(Z0);
    }

    public ComplexNumber evaluate() {
        if (root != null)
	        Zi.copy(evaluateR(root));
        return Zi;
    }

    private ComplexNumber evaluateR(Node n) {
        switch (n.type) {
        case TYPE_ADD:
            return evaluateR(n.left).add(evaluateR(n.right), t0);
        case TYPE_SUB:
            return evaluateR(n.left).sub(evaluateR(n.right), t0);
        case TYPE_MULT:
            return evaluateR(n.left).multiply(evaluateR(n.right), t0);
        case TYPE_DIV:
            return evaluateR(n.left).divide(evaluateR(n.right), t0);
        case TYPE_POW:
            return evaluateR(n.left).powi(n.poweri, t0);
        case TYPE_DPOW:
            return evaluateR(n.left).powd(n.powerd, t0);
        case TYPE_CPOW:
            return evaluateR(n.left).powc(n.num, t0);
        case TYPE_SQRT:
            return evaluateR(n.left).sqrt(t0);
        case TYPE_SIN:
            return evaluateR(n.left).sine(t0);
        case TYPE_COS:
            return evaluateR(n.left).cosine(t0);
        case TYPE_TAN:
            return evaluateR(n.left).tangent(t0);
        case TYPE_SINH:
            return evaluateR(n.left).sineh(t0);
        case TYPE_COSH:
            return evaluateR(n.left).cosineh(t0);
        case TYPE_LN:
            return evaluateR(n.left).ln(t0);
        case TYPE_EXP:
            return evaluateR(n.left).exp(t0);
        case TYPE_CONSTANT:
            return n.num;
        case TYPE_Z0:
            return Z0;
        case TYPE_Zi:
            return Zi;
        case TYPE_E:
            return COMPLEX_E;
        case TYPE_PI:
            return COMPLEX_PI; 
        }
        throw new RuntimeException("Unhandled type");
    }

    public void debugDump() {
        debugDumpR(0, root);
    }

    private void debugDumpR(int level, Node n) {
        if (n == null)
            return;

        for (int i=0; i<level; i++)
            System.out.print("  ");

        System.out.print(n.type.name());
        switch (n.type) {
        case TYPE_CONSTANT:
        case TYPE_CPOW:
            System.out.println(" " + n.num); break;
        case TYPE_POW:
            System.out.println(" " + n.poweri); break;
        case TYPE_DPOW:
            System.out.println(" " + n.powerd); break;
        case TYPE_Z0:
            System.out.println(" " + Z0); break;
        case TYPE_Zi:
            System.out.println(" " + Zi); break;
            
        default:
                System.out.println();
        }
        debugDumpR(level+1, n.left);
        debugDumpR(level+1, n.right);
    }

// We really dont need this, Z0 and Zi are an extension of CONSTANT
// Should be something like: FUNC, NUM, COMPLEX_NUM only
    private enum Type {
        TYPE_ADD, // complex + complex
        TYPE_SUB, // complex - complex
        TYPE_MULT, // complex * complex
        TYPE_DIV,  // complex / complex
        TYPE_CONSTANT, // Complex constant [a+bi]
        TYPE_POW, // complex ^ int
        TYPE_CPOW, // complex ^ complex
        TYPE_DPOW, // complex ^ double
        TYPE_SQRT, // sqrt (complex)
        TYPE_SIN, // sin (complex)
        TYPE_COS, // cos (complex)
        TYPE_TAN, // tan (complex)
        TYPE_SINH, // sinh (complex)
        TYPE_COSH, // cosh (complex)
        TYPE_LN,  // ln (complex)
        TYPE_EXP, // exp (complex)
        TYPE_Z0,   // complex constant Z0
        TYPE_Zi,   // complex constant Z
        TYPE_X,    // double real part of Z
        TYPE_Y,    // double imag part of Z
        TYPE_E,    // complex constant E
        TYPE_PI    // complex constant PI
    }
    
    // TODO: Merge with the functions of Type, make type one of constant or func, move
    //   this enum to an external file with the evaluators as abstract function.
    //   Should be able to add functions with out running javacc on this file.
    private enum Function {
    	sqrt(Type.TYPE_SQRT),
    	sin(Type.TYPE_SIN),
    	cos(Type.TYPE_COS),
    	tan(Type.TYPE_TAN),
    	sinh(Type.TYPE_SINH),
    	cosh(Type.TYPE_COSH),
    	ln(Type.TYPE_LN),
    	exp(Type.TYPE_EXP),
    	pow(Type.TYPE_CPOW),
    	;
    	
    	Function(Type type) {
    		this.type = type;
    	}
    	
    	final Type type;
    }
    
    private Type lookupFunc(String name) {
    	try {
    		return Function.valueOf(name).type;
    	} catch (Exception e) {
    		throw new RuntimeException("Unknown function '" + name + "' must be one of : " + java.util.Arrays.asList(Function.values()));
    	}
    }

    private class Node {
        Type type;
        ComplexNumber num;
        int poweri;
        double powerd;

        Node(Type type, Node left, Node right) {
            this.type = type;
            this.left = left;
            this.right = right;
        }

        Node(Node left, String power) {
            try            {              this.poweri = Integer.parseInt(power);
              this.type = Type.TYPE_POW;
            } catch (NumberFormatException e)            {              this.powerd = Double.parseDouble(power);
              this.type = Type.TYPE_DPOW;
            }
            this.left = left;
        }

        Node(Type type) {
            this.type = type;
        }

        Node(ComplexNumber constant) {
            this.type = Type.TYPE_CONSTANT;
            this.num = constant;
        }

        Node left, right;

    }
}

PARSER_END(Evaluator)

SKIP:  { 
	" " 
  | "\t" 
  | "\n" 
  | "\r"     
}

TOKEN: { 
	"(" 
  | ")" 
  | "+"
  | "-" 
  | "*" 
  | "/"  
  | "^"
  | <FUNC: ((["a"-"h"]|["j"-"z"])(["a"-"z"])+)>
  | <NUM: (("-")?("0"|((["1"-"9"])(["0"-"9"])*))("."(["0"-"9"])+)?)>
  | <DOUBLE: (("-")?("0"|((["1"-"9"])(["0"-"9"])*))("."(["0"-"9"])+))>
  | <INT: (("-")?("0"|((["1"-"9"])(["0"-"9"])*)))>
}

Node S(): {Node n;}
{
  n=E() <EOF> {return n;}
}

Node E(): {Node n1, n2; Type t;}
{
  n1=T() ( ( "+" {t=Type.TYPE_ADD;} | "-" {t=Type.TYPE_SUB;} ) 
           n2=T() {n1 = new Node(t, n1, n2); } )* { return n1; }
}

Node T(): {Node n1, n2; Type t;}
{
  n1=P() ( ( "*" {t=Type.TYPE_MULT;} | "/" {t=Type.TYPE_DIV;} )
           n2=P() {n1 = new Node(t, n1, n2); } )* {return n1;}
}

Node P(): {Node n1; Token t;}
{
  n1=F() ( "^" t=<NUM> 
    { n1= new Node(n1, t.image);}
  )? {return n1;}
}

Node F(): {Token n0, n1; Node n; Type f; }
{
  "[" n0=<NUM> (","|"+") n1=<NUM> ("i")? "]"  {return new Node(new ComplexNumber(Double.parseDouble(n0.image), Double.parseDouble(n1.image)));}
|
  "(" n=E() ")" {return n;}
| 
  "Z0" { return new Node(Type.TYPE_Z0); }
|
  "Z" { return new Node(Type.TYPE_Zi); }
|
  "E"  { return new Node(Type.TYPE_E); }|   "PI" { return new Node(Type.TYPE_PI); }| 
  n0=<NUM>  { return new Node(new ComplexNumber(Double.parseDouble(n0.image), 0)); }
|
  n0=<FUNC> { f=lookupFunc(n0.image); } "(" n=E() ")" { return new Node(f, n, null); }
}

