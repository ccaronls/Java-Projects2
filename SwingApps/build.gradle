apply plugin: 'application'
apply plugin: 'java-library'
apply plugin: 'kotlin'

mainClassName = 'cc.game.swing.AWTBoardBuilder'

configurations {
    swingLib.extendsFrom(main)
}

dependencies {
    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20090211'
    implementation group: 'net.sourceforge.jaadec', name: 'jaad', version: '0.8.5'
    implementation project(':GameLibrary')
    implementation project(':Dominos')
    implementation project(':othello')
    implementation project(':Zombicide')
    implementation project(':Monopoly')
}

sourceSets {
    main {
        java {
            srcDirs = [ 'src', 'apps' ]
        }
        resources {
            srcDirs = [ 'resources', 'images', 'gifs', 'zpngs' ]
        }
    }

    test {
//        useJUnitPlatform()
        java {
            srcDirs = ['test']
        }

        resources {
            srcDirs = ['testResources']
        }
    }

    swingLib {
        java {
            srcDirs = [ 'src ']
        }
    }
}

task swingLibJar(type: Jar) {
    from sourceSets.swingLib.output.classesDirs
    archiveName("SwingLib.jar")
}

artifacts {
    swingLib swingLibJar
}

tasks.withType(JavaExec) {
    workingDir = "${rootDir}"
    classpath sourceSets.main.runtimeClasspath
    group = 'Application'
    standardInput = System.in
}

task runCheckers(type: JavaExec) {
    description = 'Run the Checkers Applet'
    main = "cc.lib.swing.AWTCheckers"
}

task runCheckerboard(type: JavaExec) {
    description = 'Run the Checkerboard Applet'
    main = "cc.lib.swing.AWTCheckerboard"
//    args "arg1", "arg2"
}

task runBoardBuilder(type: JavaExec) {
    description = 'Run the Custum Board Builder App'
    main = "cc.lib.swing.AWTBoardBuilder"
//    args "arg1", "arg2"
}

task runDungeonBuilder(type: JavaExec) {
    description = 'Run the Dungeon Builder Applet App'
    main = "cc.applets.dungeonbb.AWTDungeonBuilder"
//    args "arg1", "arg2"
}

task runMonopoly(type: JavaExec) {
    description = 'Run Monopoly App'
    main = "cc.applets.monopoly.AWTMonopoly"
}

task runProbotLevelBuilder(type: JavaExec) {
    description = 'Run Probot Level Editor App'
    main = "cc.applets.probotbb.AWTProbotLevelBuilder"
//    args "arg1", "arg2"
}

task runYahtzeeConsole(type: JavaExec) {
    description = 'Run Probot Level Editor App'
    main = "cc.lib.main.YahtzeeConsole"
//    args "arg1", "arg2"
}

task runProbot(type: JavaExec) {
    description = 'Run Probot Desktop App'
    main = "cc.applets.probot.AWTProbot"
//    args "arg1", "arg2"
}

task runAudioClient(type: JavaExec) {
    description = 'Run the audio client'
    main = "cc.audio.stream.server.AudioClient"
//    args "arg1", "arg2"
}

task runZombicide(type: JavaExec) {
    description = 'Play Zombicide!'
    main = "cc.applets.zombicide.ZombicideApplet"
//    args "arg1", "arg2"
}

task runDominos(type: JavaExec) {
    description = 'Run the Dominos App'
    main = "cc.applets.dominos.DominosApplet"
//    args "arg1", "arg2"
}

task deployLearnToTypeApplet {
    dependsOn tasks.withType(Jar)
    group = 'Distribution'
    description = 'Deply the Learn to Type Applet to Sites'
    def homePath = System.properties['user.home']
    doLast {
        copy {
            from 'build/libs/GameLibrary.jar'
            into homePath + '/Sites/learnToType/'
        }
        copy {
            from 'html/TypingTeacher/'
            into homePath + '/Sites/learnToType/'
        }
    }
}

task deployZombicideApplet {
    dependsOn tasks.withType(Jar)
    group = 'Distribution'
    description = 'Deply the Zombicide Applet to Sites'
    def homePath = System.properties['user.home']
    def zPath = homePath + '/Sites/Zombicide/'
    doLast {
        delete zPath
        copy {
            from 'build/libs/GameLibraryApplet.jar'
            into zPath
        }
        copy {
            from 'html/Zombicide/'
            into zPath
        }
    }
}
